#!/usr/bin/env sh

ARCHLINUX="arch"
FIRST_RUN="/tmp/first_run"
PLAYBOOK_FILE="./local.yml"
BECOME_FILE_PASSWORD=".secrets/.become_password"
ANSIBLE_VAULT_FILE_PASSWORD=".secrets/.passphrase"

send_error() {
	message="$1"
	echo "ERROR: $message"
}

send_info() {
	echo "INFO: $message"
}

validate_secrets() {
	[ -f "$BECOME_FILE_PASSWORD" ] || {
		send_error "$BECOME_FILE_PASSWORD is needed"
		exit 1
	}
	[ -f "$ANSIBLE_VAULT_FILE_PASSWORD" ] || {
		send_error "$ANSIBLE_VAULT_FILE_PASSWORD is needed"
		exit 1
	}
}

detect_os() {
	if [ -f /etc/os-release ]; then
		. /etc/os-release
		echo "$ID"
	else
		uname -s | tr '[:upper:]' '[:lower:]'
	fi
}

install_ansible_galaxy() {
	os="$1"
	requirements_file="requirements/${os}.yml"
	if [ -f "$requirements_file" ]; then
		ansible-galaxy collection install -r "$requirements_file"
	else
		send_info "No OS-specific requirements file found for $os. Skipping ansible-galaxy installation."
	fi
}

setup_archlinux() {
	if ! command -v ansible >/dev/null 2>&1; then
		sudo pacman -S --noconfirm ansible ansible-core ansible-lint
	fi
}

setup_ssh_keys() {
	key_path="$HOME/.ssh/private/personal_github"

	if [ ! -f "$key_path" ]; then
		send_error "SSH key not found at $key_path"
		exit 1
	fi

	if [ -z "$SSH_AUTH_SOCK" ]; then
		send_error "No SSH agent detected in the current shell. Starting ssh-agent..."
		eval "$(ssh-agent -s)" >/dev/null
		if [ -z "$SSH_AUTH_SOCK" ]; then
			send_error "Failed to start ssh-agent."
			exit 1
		fi
	fi

	key_fingerprint=$(ssh-keygen -lf "$key_path" | awk '{print $3}')

	if ssh-add -l 2>/dev/null | rg "$key_fingerprint"; then
		send_info "SSH key is already added."
	else
		send_info "Adding SSH key..."
		if ! ssh-add "$key_path" >/dev/null 2>&1; then
			send_error "Failed to add SSH key."
			exit 1
		else
			send_info "SSH key added successfully."
			return 0
		fi
	fi
}

get_media_from_usb() {
	books_path="/run/media/bryant/tiagovault/backups/books"
	music_path="/run/media/bryant/tiagovault/backups/music"

	rsync -avh --progress --delete "$music_path/" "$HOME/Music"
	rsync -avh --progress --delete "$books_path/" "$HOME/Documents/books"
}

get_docker_images() {
	if ! command -v docker >/dev/null 2>&1; then
		send_info "Docker is not installed. Skipping docker image pulls."
		return 1
	fi

	docker pull node:alpine
	docker pull postgres:alpine
}

print_remaining_to_be_done() {
	send_info "Remaining tasks to be completed:"
	send_info "  - Set GTK theme using LXAppearance GUI"
	send_info "  - Add ssh private key to agent $HOME/.ssh/private/*"
	send_info "  - Log in to Browser, Outlook, Bitwarden, GitHub, Google, Twitch"
	send_info "  - Import and trust your private GPG key at $HOME/.gnupg/private_key.asc"
}

executing_custom_scripts() {
	if [ -x "$HOME/bin/global/update-software" ]; then
		"$HOME/bin/global/update-software"
	fi
	if [ -x "$HOME/bin/global/fix-firefox-ui" ]; then
		"$HOME/bin/global/fix-firefox-ui"
	fi
}

setup_post_installation() {
	if [ ! -f "$FIRST_RUN" ]; then
		send_error "Post installation cannot be executed, need to restart first"
		send_error "FIRST RUN" >>"$FIRST_RUN"
		return 1
	fi

	echo "Executing post installation tasks..."
	pids=""

	get_docker_images &
	pids="$pids $!"
	get_media_from_usb &
	pids="$pids $!"
	pids="$pids $!"

	for pid in $pids; do
		if ! wait "$pid"; then
			echo "Task with PID $pid failed"
			return 1
		fi
	done

	executing_custom_scripts
	print_remaining_to_be_done
}

get_user_compositor() {
	while true; do
		printf "Which environment would you like (xorg/wayland): " >/dev/tty
		read -r answer
		case "$answer" in
		xorg | wayland)
			echo "$answer"
			return
			;;
		*)
			send_info "You have selected $answer"
			;;
		esac
	done
}

run_ansible_playbooks() {
	user_compositor="$(get_user_compositor)"

	ansible-playbook "$PLAYBOOK_FILE" \
		--become-password-file="$BECOME_FILE_PASSWORD" \
		--tags common

	ansible-playbook "$PLAYBOOK_FILE" \
		--become-password-file="$BECOME_FILE_PASSWORD" \
		--tags ssh && setup_ssh_keys

	ansible-playbook "$PLAYBOOK_FILE" \
		--become-password-file="$BECOME_FILE_PASSWORD"

	ansible-playbook "$PLAYBOOK_FILE" \
		--become-password-file="$BECOME_FILE_PASSWORD" \
		--tags "$user_compositor"

	send_info "Ansible playbooks executed successfully."
}

setup_os_dependencies() {
	system_os=$(detect_os)

	if [ -z "$system_os" ]; then
		send_error "System OS not recognized."
		exit 1
	fi

	case "$system_os" in
	"$ARCHLINUX")
		setup_archlinux
		;;
	*) ;;
	esac

	install_ansible_galaxy "$system_os"
}

main() {
	validate_secrets
	setup_os_dependencies
	run_ansible_playbooks
	setup_post_installation
}

main

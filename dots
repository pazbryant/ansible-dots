#!/usr/bin/env sh

set -e

ARCHLINUX="arch"
BECOME_FILE_PASSWORD=".secrets/.become_password"
ANSIBLE_VAULT_FILE_PASSWORD=".secrets/.passphrase"

# Function to validate that required files exist
validate_file_exists() {
  if [ ! -f "$1" ]; then
    echo "$1 is required"
    exit 1
  fi
}

validate_secrets() {
  validate_file_exists "$BECOME_FILE_PASSWORD"
  validate_file_exists "$ANSIBLE_VAULT_FILE_PASSWORD"
}

# Function to detect the OS
detect_os() {
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    echo "$ID"
  else
    uname -s | tr '[:upper:]' '[:lower]'
  fi
}

# Install ansible galaxy collections for the OS
install_ansible_galaxy() {
  local os=$1
  local os_requirements="requirements/$os.yml"
  [ -f "$os_requirements" ] && ansible-galaxy collection install -r "$os_requirements"
}

# Setup functions for different OSes
setup_archlinux() {
  # Only install if ansible is not already installed
  if ! command -v ansible >/dev/null 2>&1; then
    sudo pacman -S --noconfirm ansible ansible-core ansible-lint
  fi
}

setup_ubuntu() {
  # Only install if ansible is not already installed
  if ! dpkg -s ansible >/dev/null 2>&1; then
    sudo apt-get install -y ansible ansible-core ansible-lint
  fi
}

# Setup SSH keys and agent
setup_ssh_keys() {
  local key_path="$HOME/.ssh/private/personal_github"

  if [ ! -f "$key_path" ]; then
    echo "SSH key not found: $key_path"
    exit 1
  fi

  eval "$(ssh-agent -s)"
  ssh-add "$key_path" >/dev/null 2>&1 || {
    echo "Failed to add SSH key"
    exit 1
  }
  echo "SSH keys added successfully"
}

# Remove ansible dots if exists
remove_ansible_dots() {
  local ansible_dots="$HOME/ansible-dots"
  [ -d "$ansible_dots" ] && rm -rf "$ansible_dots"
}

# Get media from USB
get_media_from_usb() {
  local books_path="/run/media/bryant/tiagovault/backups/books/2024-11-06"
  local music_path="/run/media/bryant/tiagovault/backups/music/2024-11-06"

  rsync -avh --progress --delete "$music_path/" "$HOME/Music"
  rsync -avh --progress --delete "$books_path/" "$HOME/Documents/books"
}

# Pull Docker images
get_docker_images() {
  for image in node:alpine redis:alpine nginx:alpine alpine:latest ubuntu:latest postgres:alpine; do
    docker pull "$image"
  done
}

# Print remaining steps
print_remaining_to_be_done() {
  echo "Remaining tasks:"
  echo "  - Setup RCLONE with MEGA"
  echo "  - Set GTK theme using LXAppearance"
  echo "  - Login to Firefox, Outlook, Bitwarden, GitHub, Google, Twitch"
  echo "  - Import private GPG key and trust it: $HOME/.gnupg/private_key.asc"
}

# Execute custom scripts
executing_custom_scripts() {
  "$HOME/bin/global/update-software"
  "$HOME/bin/global/update-firefox-ui"
}

# Post installation tasks
setup_post_installation() {
  echo "Executing post-installation steps..."
  get_docker_images
  get_media_from_usb
  remove_ansible_dots
  executing_custom_scripts
  print_remaining_to_be_done
}

# Run Ansible playbooks
run_ansible_playbooks() {
  ansible-playbook ./local.yml --become-password-file="$BECOME_FILE_PASSWORD" --tags ssh && setup_ssh_keys
  ansible-playbook ./local.yml "$@" --become-password-file="$BECOME_FILE_PASSWORD" --skip-tags ssh
  echo "Ansible playbooks executed successfully"
}

# Install OS dependencies based on detected OS
setup_os_dependencies() {
  local system_os=$(detect_os)

  if [ -z "$system_os" ]; then
    echo "Unable to detect system OS"
    exit 1
  fi

  case "$system_os" in
  "$ARCHLINUX")
    setup_archlinux
    ;;
  *)
    setup_ubuntu
    ;;
  esac

  install_ansible_galaxy "$system_os"
}

# Main function
main() {
  validate_secrets
  setup_os_dependencies
  run_ansible_playbooks "$@"
  setup_post_installation
}

main "$@"
